<?php
/**
 * Created by PhpStorm.
 * User: dezzpil
 * Date: 16.10.18
 * Time: 13:43
 */

class ZFE_Controller_Default_Files extends Controller_Abstract
{
    /**
     * @var Editors
     */
    protected $user;

    /**
     * @inheritDoc
     */
    public function preDispatch()
    {
        parent::preDispatch(); // TODO: Change the autogenerated stub
        $auth = Zend_Auth::getInstance();
        if ($auth->hasIdentity()) {
            $this->user = Editors::find($auth->getIdentity()['id']);
        } else {
            $this->error('Доступ запрещен');
        }
    }

    /**
     * @return ZFE_File_Manageable
     * @throws Zend_Controller_Action_Exception
     */
    protected function findModelItem() : ZFE_File_Manageable
    {
        $itemModel = $this->getParam('m');
        $itemId = $this->getParam('id');
        if (class_exists($itemModel)) {
            $item = $itemModel::find($itemId);
            if (!$item) {
                throw new Zend_Controller_Action_Exception('Данной записи не существует в системе', 404);
            }
        } else {
            throw new Zend_Controller_Action_Exception('Данной модели не существует в системе', 404);
        }

        if (!($item instanceof ZFE_File_Manageable)) {
            throw new Zend_Controller_Action_Exception('Данная запись не поддерживает необходимые методы для работы с файлами', 403);
        }

        return $item;
    }

    /**
     * @param ZFE_File_Manager $manager
     * @return Files|null
     * @throws ZFE_File_Exception
     * @throws Doctrine_Query_Exception
     * @throws Zend_Controller_Action_Exception
     */
    protected function findFile(ZFE_File_Manager $manager) : ?Files
    {
        $fileId = $this->getParam('fid');
        $files = $manager->getFiles('id');
        if ($files->count() && $files->contains($fileId)) {
            return $files->get($fileId);
        }
        throw new Zend_Controller_Action_Exception('Файл не найден', 404);
    }

    /**
     * Удалить файл
     *
     * @throws ZFE_File_Exception
     * @throws Doctrine_Query_Exception
     * @throws Doctrine_Record_Exception
     * @throws Zend_Controller_Action_Exception
     * @throws Zend_Exception
     */
    public function deleteAction()
    {
        $item = $this->findModelItem();
        $fm = $item->getFileManager(true, $this->user);
        $accessor = $fm->getAccessor();
        if (!$accessor->isAllowToDelete()) {
            throw new Zend_Controller_Action_Exception('Удаление файла запрещено', 403);
        }

        $file = $this->findFile($fm);
        if ($file) {
            $fm->getLoader()->setRecord($file)->erase();
            $file->delete();
            $this->getNotices()->ok('Файл `' . $file->title_original . '` успешно удален');
        } else {
            $this->getNotices()->err('Файл для записи не найден. Удаление невозможно');
        }
        $this->redirect($item->getEditUrl());
    }

    /**
     * Скачать файл
     *
     * @throws ZFE_File_Exception
     * @throws Doctrine_Query_Exception
     * @throws Doctrine_Record_Exception
     * @throws Zend_Controller_Action_Exception
     * @throws Zend_Exception
     */
    public function downloadAction()
    {
        $item = $this->findModelItem();
        $fm = $item->getFileManager(true, $this->user);
        $accessor = $fm->getAccessor();
        if (!$accessor->isAllowToDownload()) {
            throw new Zend_Controller_Action_Exception('Скачивание файла запрещено', 403);
        }

        $file = $this->findFile($fm);
        $loader = $fm->getLoader()->setRecord($file);

        // location /download должен быть указан в конфиге nginx
        // location /download {
        //        internal;
        //        alias /var/www/links/project/data/files;
        //    }
        $this->_helper->download($loader->absFilePath(), '/download/' . $file->path, $file->title);
    }

    /**
     * Скачать все файлы одним архивом
     */
    public function downloadAll()
    {
        // TODO создавать временный файл zip и отдавать его
        // TODO как/когда его потом удалять?
    }

    /**
     * Просмотр списка файлов
     *
     * @throws Doctrine_Connection_Exception
     * @throws Doctrine_Query_Exception
     * @throws Doctrine_Record_Exception
     * @throws ZFE_File_Exception
     * @throws Zend_Controller_Action_Exception
     */
    public function viewAction()
    {
        $item = $this->findModelItem();
        $fm = $item->getFileManager(true, $this->user);

        $this->view->items = null;
        $accessor = $fm->getAccessor();
        if ($accessor->isAllowToView()) {
            $this->view->items = $fm->getAgents($fm->getFieldsSchemas());
        }

        return;
    }

    /**
     * Управление списком файлов
     */
    public function controlAction()
    {
        $item = $this->findModelItem();
        $fm = $item->getFileManager(true, $this->user);

        $groups = null;
        $accessor = $fm->getAccessor();
        if (!$accessor->isAllowToControl()) {
            $this->view->groups = null;
        } else {
            $this->view->item = $item;
            $this->view->schemas = $fm->getFieldsSchemas();
            $this->view->groups = $fm->getAgents($fm->getFieldsSchemas(), true);
        }

        return;
    }

    /**
     * Запланировать обработку файла
     *
     * @throws ZFE_File_Exception
     * @throws Doctrine_Query_Exception
     * @throws Zend_Controller_Action_Exception
     */
    public function processAction()
    {
        $item = $this->findModelItem();
        $fm = $item->getFileManager(true, $this->user);
        $accessor = $fm->getAccessor();
        if (!$accessor->isAllowToProcess()) {
            throw new Zend_Controller_Action_Exception('Доступ запрещен', 403);
        }

        /* @var $file ZFE_File_Processable */
        $file = $this->findFile($fm);
        if (!($file instanceof ZFE_File_Processable)) {
            $this->getNotices()->err('Файл не поддерживает обработку');
        } else {
            /* @var $mapping ZFE_File_Processor_Mapping */
            $mapping = $file->getProcessings();
            foreach ($mapping as $modelName => $collection) { /* @var $collection Doctrine_Collection */
                if ($collection->count() == 0) {
                    /* @var $processing Helper_File_Processing */
                    $processing = new $modelName;
                    $processor = $processing->getProcessor();
                    $processor->plan($file)->getProcessing()->save();

                    $this->afterProccessingPlanned($item);

                    $this->getNotices()->ok($processor->getDesc() . ' выполняется');
                }
            }
        }

        /** @var Zend_Controller_Request_Http $req */
        $req = $this->getRequest();
        $this->redirect($req->getServer('HTTP_REFERER'));
    }

    /**
     * Хук
     * @param ZFE_File_Manageable $item
     * @throws Exception
     */
    protected function afterProccessingPlanned(ZFE_File_Manageable $item) {}
}
